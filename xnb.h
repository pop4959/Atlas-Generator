#ifndef ATLAS_GENERATOR_XNB_H
#define ATLAS_GENERATOR_XNB_H

/*
 * Relevant type reader qualified c# class names.
 */
#define READER_NAME_TEXTURE_ATLAS "TextureAtlasContent.TextureAtlasReader, TextureAtlasContentPC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
#define READER_NAME_TEXTURE_REGION "TextureAtlasContent.TextureRegionReader, TextureAtlasContentPC, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null"
#define READER_NAME_RECTANGLE "Microsoft.Xna.Framework.Content.RectangleReader"

/*
 * Relevant type reader ids.
 */
enum reader_type
{
	READER_TYPE_TEXTURE_ATLAS = 1,
	READER_TYPE_TEXTURE_REGION,
	READER_TYPE_RECTANGLE
};

/*
 * Type for a 7 bit encoded integer, used frequently in XNB data.
 */
typedef uint32_t uint7be_t;

/*
 * Typedef for the sake of logically differentiating strings from byte arrays.
 */
typedef unsigned char byte;

/*
 * The type reader used in serialization of XNB objects.
 */
typedef struct type_reader
{
	uint7be_t type_reader_name_length;
	char *type_reader_name;
	int32_t reader_version_number;
	struct type_reader *next;
} type_reader;

/*
 * An arbitrary 'object' of some type in XNB, which has a type reader for
 * serialization, and contains a payload containing the object's data.
 */
typedef struct object
{
	uint7be_t type_reader_id;
	uint32_t payload_size;
	byte *payload;
	struct object *next;
} object;

/*
 * An object, used in texture regions.
 */
typedef struct rectangle
{
	uint7be_t type_reader_id;
	int32_t x;
	int32_t y;
	int32_t width;
	int32_t height;
} rectangle;

/*
 * An object, used in texture atlases.
 */
typedef struct texture_region
{
	uint7be_t type_reader_id;
	uint7be_t texture_region_name_length;
	char *texture_region_name;
	rectangle rect;
	float offset_x;
	float offset_y;
	float size_x;
	float size_y;
	struct texture_region *next;
} texture_region;

/*
 * An object, which represents a texture atlas.
 */
typedef struct texture_atlas
{
	uint7be_t type_reader_id;
	int32_t sprite_frame_count;
	texture_region *texture_regions;
	texture_region *texture_regions_end;
	int32_t width;
	int32_t height;
} texture_atlas;

/*
 * Definition for the XNB format. The format identifier should be 'XNB', with
 * a target platform of 'w' (Windows), 'm' (Windows Phone 7), or 'x' (Xbox 360).
 * This is followed by the XNB format version, flags, and compressed/decompressed
 * data file sizes (of the whole file). The type readers used in the XNB must be
 * specified, as well as the primary asset. Shared resources are optional.
 */
typedef struct xnb
{
	char format_identifier[3];
	char target_platform;
	uint8_t xnb_format_version;
	uint8_t flag_bits;
	uint32_t compressed_file_size;
	uint32_t decompressed_data_size;
	uint7be_t type_reader_count;
	type_reader *type_readers;
	type_reader *type_readers_end;
	uint7be_t shared_resource_count;
	object primary_asset_data;
	object *shared_resource_data;
	object *shared_resource_data_end;
} xnb;

/*
 * Initialize the XNB.
 */
xnb *xnb_init(object *primary_asset_data);

/*
 * Add a type reader to the XNB.
 */
void xnb_add_type_reader(xnb *x, char *reader_name);

/*
 * Add shared resource data to the XNB.
 */
void xnb_add_shared_resource_data(xnb *x, object *shared_resource);

/*
 * Deallocates any memory allocated to the XNB.
 */
void xnb_free(xnb *x);

/*
 * Computes the file size of the XNB file that would be generated by the function xnb_write.
 */
uint32_t xnb_file_size(xnb *x);

/*
 * Write an XNB file.
 */
void xnb_write(xnb *x, const char *file_name);

/*
 * Checks if XNB is compressed based on its flags.
 */
int xnb_is_compressed(uint8_t flag_bits);

/*
 * Checks if XNB content is HiDef (true) or Reach (false) based on its flags.
 */
int xnb_is_hidef(uint8_t flag_bits);

/*
 * Encodes a given 64 bit integer as as a 7 bit encoded integer, storing
 * it in a buffer. Returns the size in bytes of the resulting integer.
 */
size_t encode_7_bit_encoded_int(byte **buffer, uint7be_t number);

/*
 * Initialize an XNB texture atlas object.
 */
texture_atlas *xnb_atlas_init(unsigned int frame_count);

/*
 * Add texture regions to a texture atlas object.
 */
void xnb_atlas_add_region(texture_atlas *ta, char *texture_region_name, int32_t x, int32_t y, int32_t width,
						  int32_t height, float offset_x, float offset_y, float size_x, float size_y);

/*
 * Flattens an atlas into an object for use in XNB.
 */
object *xnb_atlas_flatten_to_object(texture_atlas *ta);

#endif //ATLAS_GENERATOR_XNB_H
